@model PathfinderHomebrew.Models.Item
@using PathfinderHomebrew.Authorization;
@using Microsoft.AspNetCore.Authorization
@using PathfinderHomebrew.Models
@inject IAuthorizationService AuthorizationService

@{
    var parms = new Dictionary<string, string>
{
        { "key", Model.Key },
        { "type", Model.Type.ToString() }
    };
}

<article>
    <h1>
        <b>(@Model.TypeName()) @Model.Name</b>

        @if ((await AuthorizationService.AuthorizeAsync(
   User, Model.OwnerID, Operations.Update)).Succeeded)
        {
            <span> | <a class="feat-Link" asp-area="" asp-controller="Item" asp-action="Edit" asp-all-route-data="parms"><b>Edit</b></a></span>
        }
        @if ((await AuthorizationService.AuthorizeAsync(
   User, Model.OwnerID, Operations.Delete)).Succeeded)
        {
            <span> | <a class="feat-Link" href="@Url.Action("Remove", "Item", new { key = Model.Key })">Delete</a></span>
        }
        <br />
        <br />
    </h1>
    <div class="details">
    </div>
    <div class="content feat-Content">

        <p>
            <b class="black-ben">Aura</b> @Model.AuraStrength
            @for (int i = 0; i < Model.AuraTypes.Count; i++)
            {@Model.AuraTypes[i].AuraType.ToString()@if (Model.AuraTypes.Count - 1 > i)
            {<span>, </span>}
            else
            {<span>;</span>}}
            <b class="black-ben">CL</b>
            @(Model.CasterLevel)th;
            <b class="black-ben">Weight </b>
            @Model.Weight
            lbs;
            <b class="black-ben">Price </b>
            @Model.Price
            gp
        </p>

        @if (Model.Intelligent == true)
        {
    <p class="item-divider">STATISTICS</p>
            <p>
                <b class="black-ben">Alignment</b> @(Model.Alignment);
                <b class="black-ben">Ego </b> @(Model.Ego)
                <b class="black-ben">Senses</b> @(Model.Senses)
            </p>

            <p>
                <b class="black-ben">Intelligence </b> @(Model.Int);
                <b class="black-ben">Wisdom </b> @(Model.Wis);
                <b class="black-ben">Charisma  </b> @(Model.Cha);
            </p>

            <p>
                <b class="black-ben">Language </b> @(Model.Communication)
            <b class="black-ben">Special Purpose </b> @(Model.SpecialPurpose)
            </p>

            @if (Model.DedicatedPower.Length > 0)
            {
                <p>
                    <b class="black-ben">Dedicated Power </b> @(Model.DedicatedPower)
                </p>
            }

            @if (Model.spellLikeAbilities.Count > 0)
            {
                <p>
                    <b class="black-ben">Spell-Like Abilities </b> (CL @(Model.CasterLevelI)th, concentration @(Model.Concentration))
                </p>

                @for (int i = 0; i < Model.spellLikeAbilities.Count; i++)
                {
                    <p>
                        @Model.spellLikeAbilities[i].Frequancy.ToString()/@(Model.spellLikeAbilities[i].FreqType)-@Model.spellLikeAbilities[i].Name
                    </p>
                }
            }
        }

        <p class="item-divider">DESCRIPTION</p>
        <p>@Model.Description</p>
        @if (!Model.Artifact)
        {
            <p class="item-divider">CONSTRUCTION REQUIREMENTS</p>
            <p>@Model.ConstructionRequirements; <b>Cost </b> @(Model.Price/2) gp</p>
        }
        else
        {
            <p class="item-divider">DESTRUCTION</p>
            @if ((await AuthorizationService.AuthorizeAsync(
   User, Model.OwnerID, Operations.Update)).Succeeded || Model.DestructionKnown)
            {
                <p>@Model.Destruction;</p>
            }
            else
            {
                <p>Unknown;</p>
            }
        }

    </div>
</article>